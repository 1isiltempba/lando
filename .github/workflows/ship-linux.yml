name: Ship Linux Installer

on:
  push:
    branches:
      - main
      - 'preview/**'
    tags:
      - test*
      - v*

jobs:
  ship-linux-pkg:
    runs-on: ${{ matrix.os }}
    env:
      TERM: xterm
    strategy:
      matrix:
        os:
          - ubuntu-20.04
        node-version:
          - '14'
        ruby-version:
          - '2.6'
        flavor:
          - deb
          - pacman
          - rpm
    steps:
      # Install deps and cache
      # Eventually it would be great if these steps could live in a separate YAML file
      # that could be included in line to avoid code duplication
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
      - name: Get Yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Use Yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install Yarn dependencies
        run: yarn install --prefer-offline --frozen-lockfile

      # Import ENVVARS from build.env
      # @NOTE: We do this so there is a single place to update versions
      - name: Import build version envvars
        id: import-env
        shell: bash
        run: |
          while read line; do
            echo "$line" >> $GITHUB_ENV
          done < BUILD.env

      # Build and prep the release
      - name: Rewrite the version based on the tag
        run: |
          node scripts/dev-version.js
          node ./bin/lando.js version
      - name: Assemble pieces
        run: scripts/assemble-linux.sh
      - name: Create package
        run: |
          LANDO_VERSION=$(node -pe 'JSON.parse(process.argv[1]).version' "$(cat package.json)")
          scripts/create-pkg.sh ${{ matrix.flavor }} "$LANDO_VERSION"

      # Create and upload releases
      - name: Create releases
        env:
          SOURCE_BRANCH: "${GITHUB_REF#refs/heads/}"
          SOURCE_TAG: "$(git describe --tags --abbrev=0)"
        shell: bash
        run: |
          # Create release directories
          mkdir -p ./releases ./dev-builds

          # Snapshot release
          cp -f "./dist/lando.${{ matrix.flavor }}" "./dev-builds/lando-build-${{ github.sha }}.${{ matrix.flavor }}"

          # Branch releases
          if [ -z "$SOURCE_TAG" ]; then cp -f "./dist/lando.${{ matrix.flavor }}" "./releases/lando-$SOURCE_BRANCH-latest.${{ matrix.flavor }}"; fi
          # Latest dev release
          if [[ "$SOURCE_BRANCH" == "main" ]]; then cp -f "./dist/lando.${{ matrix.flavor }}" "./releases/lando-latest.${{ matrix.flavor }}"; fi
          # Tag releases
          if [ ! -z "$SOURCE_TAG" ]; then cp -f "./dist/lando.${{ matrix.flavor }}" "./releases/lando-$SOURCE_TAG.${{ matrix.flavor }}"; fi
          # Latest stable release
          if [ ! -z "$SOURCE_TAG" ]; then cp -f "./dist/lando.${{ matrix.flavor }}" "./releases/lando-stable.${{ matrix.flavor }}"; fi

          # Print what we end up with
          ls -lsa ./releases
          ls -lsa ./dev-builds
